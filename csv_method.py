import csv
import json
import os

from InvenTreeManager import InvenTreeManager
from PyQt5.QtWidgets import QMessageBox

from Settings import Settings


class CsvLib:
    def __init__(self, parent=None):
        self.parent = parent
        self.settings = Settings()

    def del_lines(self, path, lines_to_remove=12):
        if not path or not os.path.exists(path):
            QMessageBox.warning(
                self.parent, "–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω."
            )
            return

        try:
            with open(path, "r", encoding="utf-8", errors="replace") as f:
                lines = f.readlines()

            cleaned_lines = lines[lines_to_remove:]
            output_path = os.path.splitext(path)[0] + "_processed.csv"

            with open(output_path, "w", encoding="utf-8") as f:
                f.writelines(cleaned_lines)

            QMessageBox.information(
                self.parent, "–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω", f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤:\n{output_path}"
            )
            return output_path

        except Exception as e:
            QMessageBox.critical(
                 self.parent, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{e}"
            )

    def generate_footprint_json(self, path):
        if not path or not os.path.exists(path):
            QMessageBox.warning(
                self.parent, "–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω."
            )
            return

        try:
            columns = self.settings.load(
                "coloumns"
            )  # ["Footprint", "Rotation", "FeedT"]
            if not isinstance(columns, list) or len(columns) < 2:
                QMessageBox.warning(
                    self.parent, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫."
                )
                return

            key_column = columns[0]
            value_columns = columns[1:]
            result = {}

            with open(path, newline="", encoding="utf-8") as file:
                reader = csv.DictReader(file)

                # üîé –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –ª–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å –≤ CSV
                fieldnames = reader.fieldnames
                missing = [col for col in columns if col not in fieldnames]
                if missing:
                    QMessageBox.warning(
                        self.parent,
                        "–û—à–∏–±–∫–∞ –∫–æ–ª–æ–Ω–æ–∫",
                        f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –≤ CSV: {', '.join(missing)}\n\n"
                        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(fieldnames or [])}",
                    )
                    return

                for row in reader:
                    key = row[key_column].strip()

                    if key not in result:
                        entry = {}
                        for col in value_columns:
                            val = row.get(col, "").strip()
                            try:
                                val = float(val)
                            except ValueError:
                                pass
                            entry[col] = val

                        result[key] = entry

            project_dir = os.path.dirname(
                os.path.abspath(__file__)
            )  # –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É .py-—Ñ–∞–π–ª—É
            output_path = os.path.join(project_dir, "footprint.json")

            with open(output_path, "w", encoding="utf-8") as f:
                json.dump(result, f, indent=4, ensure_ascii=False)

            QMessageBox.information(
                self.parent, "–ì–æ—Ç–æ–≤–æ", f"–§–∞–π–ª footprint.json —Å–æ–∑–¥–∞–Ω:\n{output_path}"
            )
            return output_path

        except Exception as e:
            QMessageBox.critical(self.parent, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{e}")

    def apply_footprint_rotation(self, path):
        if not path or not os.path.exists(path):
            QMessageBox.warning(self.parent, "–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω.")
            return

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º footprint.json –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
            with open("footprint.json", 'r', encoding='utf-8') as f:
                footprint_data = json.load(f)

            updated_rows = []
            with open(path, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                fieldnames = reader.fieldnames

                for row in reader:
                    original_fp = row.get("Footprint", "").strip()
                    feedt = row.get("FeedT", "").strip()
                    rot_str = row.get("Rotation", "").replace(",", ".").strip()

                    try:
                        rotation_csv = float(rot_str)
                    except ValueError:
                        rotation_csv = 0.0

                    # üß© –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –¥–ª—è footprint.json ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
                    fp_key = original_fp

                    # ‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É Footprint –≤ CSV, –µ—Å–ª–∏ FeedT == Tray
                    if feedt.lower() == "tray":
                        row["Footprint"] = f"{original_fp}_t"

                    # –ü–æ–ª—É—á–∞–µ–º Rotation –∏–∑ footprint.json
                    rotation_json = 0.0
                    if fp_key in footprint_data:
                        try:
                            rotation_json = float(footprint_data[fp_key].get("Rotation", 0.0))
                        except (ValueError, TypeError):
                            rotation_json = 0.0

                    # –°–∫–ª–∞–¥—ã–≤–∞–µ–º Rotation
                    new_rotation = rotation_csv + rotation_json

                    # üîÅ –ï—Å–ª–∏ Rotation >= 360 ‚Äî –æ—Ç–Ω–∏–º–∞–µ–º 360
                    if new_rotation >= 360:
                        new_rotation -= 360

                    # –û–±–Ω–æ–≤–ª—è–µ–º Rotation –≤ —Å—Ç—Ä–æ–∫–µ
                    row["Rotation"] = str(new_rotation)

                    updated_rows.append(row)

            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º CSV
            with open(path, 'w', encoding='utf-8', newline='') as f:
                writer = csv.DictWriter(f, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(updated_rows)

            QMessageBox.information(self.parent, "–ì–æ—Ç–æ–≤–æ", f"Rotation –∏ Footprint –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤:\n{path}")

        except Exception as e:
            QMessageBox.critical(self.parent, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{e}")
    

    def update_feedn_from_inventree(self, csv_path):
            if not os.path.exists(csv_path):
                print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            sett = Settings()
            server = sett.load("server")
            itm = InvenTreeManager(
                url=server["url"],
                username=server["username"],
                password=server["password"],
            )
            itm.connect()

            output_path = csv_path.replace(".csv", "_updated.csv")

            with open(csv_path, newline='', encoding='utf-8') as infile, \
                open(output_path, 'w', newline='', encoding='utf-8') as outfile:

                reader = csv.DictReader(infile)
                fieldnames = reader.fieldnames
                writer = csv.DictWriter(outfile, fieldnames=fieldnames)
                writer.writeheader()

                for row in reader:
                    part_number = row.get("PartNumber", "").strip()
                    feed_t = row.get("FeedT", "").strip()

                    if feed_t != "Tray":
                        new_feedn = itm.get_smt600_locations_for_part_name(part_number, feed_t)
                        if new_feedn:
                            row["FeedN"] = new_feedn

                    writer.writerow(row)

            print(f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {output_path}")
