import csv
import json
import os

from PyQt5.QtWidgets import QMessageBox

from Settings import Settings


class CsvLib:
    def __init__(self, parent=None):
        self.parent = parent
        self.settings = Settings()

    def del_lines(self, path, lines_to_remove=12):
        if not path or not os.path.exists(path):
            QMessageBox.warning(
                self.parent, "–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω."
            )
            return

        try:
            with open(path, "r", encoding="utf-8") as f:
                lines = f.readlines()

            cleaned_lines = lines[lines_to_remove:]
            output_path = os.path.splitext(path)[0] + "_processed.csv"

            with open(output_path, "w", encoding="utf-8") as f:
                f.writelines(cleaned_lines)

            QMessageBox.information(
                self.parent, "–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω", f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤:\n{output_path}"
            )
            return output_path

        except Exception as e:
            QMessageBox.critical(
                self.parent, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{e}"
            )

    def generate_footprint_json(self, path):
        if not path or not os.path.exists(path):
            QMessageBox.warning(
                self.parent, "–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω."
            )
            return

        try:
            columns = self.settings.load(
                "coloumns"
            )  # ["Footprint", "Rotation", "FeedT"]
            if not isinstance(columns, list) or len(columns) < 2:
                QMessageBox.warning(
                    self.parent, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫."
                )
                return

            key_column = columns[0]
            value_columns = columns[1:]
            result = {}

            with open(path, newline="", encoding="utf-8") as file:
                reader = csv.DictReader(file)

                # üîé –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –ª–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å –≤ CSV
                fieldnames = reader.fieldnames
                missing = [col for col in columns if col not in fieldnames]
                if missing:
                    QMessageBox.warning(
                        self.parent,
                        "–û—à–∏–±–∫–∞ –∫–æ–ª–æ–Ω–æ–∫",
                        f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –≤ CSV: {', '.join(missing)}\n\n"
                        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(fieldnames or [])}",
                    )
                    return

                for row in reader:
                    key = row[key_column].strip()

                    if key not in result:
                        entry = {}
                        for col in value_columns:
                            val = row.get(col, "").strip()
                            try:
                                val = float(val)
                            except ValueError:
                                pass
                            entry[col] = val

                        result[key] = entry

            project_dir = os.path.dirname(
                os.path.abspath(__file__)
            )  # –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É .py-—Ñ–∞–π–ª—É
            output_path = os.path.join(project_dir, "footprint.json")

            with open(output_path, "w", encoding="utf-8") as f:
                json.dump(result, f, indent=4, ensure_ascii=False)

            QMessageBox.information(
                self.parent, "–ì–æ—Ç–æ–≤–æ", f"–§–∞–π–ª footprint.json —Å–æ–∑–¥–∞–Ω:\n{output_path}"
            )
            return output_path

        except Exception as e:
            QMessageBox.critical(self.parent, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{e}")

    def apply_footprint_rotation(self, path):
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ footprint.json –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
            project_dir = os.path.dirname(os.path.abspath(__file__))
            footprint_path = os.path.join(project_dir, "footprint.json")

            if not os.path.exists(footprint_path):
                QMessageBox.warning(self.parent, "–û—à–∏–±–∫–∞", f"–ù–µ –Ω–∞–π–¥–µ–Ω footprint.json –≤ {footprint_path}")
                return

            with open(footprint_path, 'r', encoding='utf-8') as f:
                footprint_data = json.load(f)

            with open(path, newline='', encoding='utf-8') as infile:
                reader = csv.DictReader(infile)
                fieldnames = reader.fieldnames
                rows = list(reader)

            for row in rows:
                footprint = row.get("Footprint", "").strip()
                current_rotation = row.get("Rotation", "").replace(",", ".").strip()

                # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —á–∏—Å–ª—É
                try:
                    current_rotation = float(current_rotation)
                except ValueError:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ Rotation –Ω–µ —á–∏—Å–ª–æ

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ footprint.json, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if footprint in footprint_data and "Rotation" in footprint_data[footprint]:
                    try:
                        additional_rotation = float(footprint_data[footprint]["Rotation"])
                        row["Rotation"] = str(current_rotation + additional_rotation)
                    except ValueError:
                        pass

            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å CSV
            with open(path, 'w', newline='', encoding='utf-8') as outfile:
                writer = csv.DictWriter(outfile, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(rows)

            QMessageBox.information(self.parent, "–ì–æ—Ç–æ–≤–æ", "Rotation –æ–±–Ω–æ–≤–ª—ë–Ω –≤ —Ñ–∞–π–ª–µ.")
        except Exception as e:
            QMessageBox.critical(self.parent, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Rotation:\n{e}")
